import groovy.json.JsonSlurper

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.4.10'

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:1.0.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
    project.ext {
        buildToolsVersion = "29.0.2"
        compileSdkVersion = 29
        targetSdkVersion = 29
        minSdkVersion = 21

        appCompat = 'androidx.appcompat:appcompat:1.2.0'
        cardView = 'androidx.cardview:cardview:1.0.0'
        constraintLayout = 'androidx.constraintlayout:constraintlayout:2.0.1'
        dynamicAnimations = 'androidx.dynamicanimation:dynamicanimation:1.1.0-alpha03'
        dynamicAnimationsKtx = 'androidx.dynamicanimation:dynamicanimation-ktx:1.0.0-alpha03'
        espressoContrib = 'androidx.test.espresso:espresso-contrib:3.3.0'
        espressoCore = 'androidx.test.espresso:espresso-core:3.3.0'
        espressoIdlingResource = 'androidx.test.espresso.idling:idling-concurrent:3.3.0'
        fragment = 'androidx.fragment:fragment:1.3.0-beta01'
        fragmentKtx = 'androidx.fragment:fragment-ktx:1.3.0-beta01'
        kotlin = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
        ktxCore = 'androidx.core:core-ktx:1.3.2'
        lifeCycleReactiveStreams = 'androidx.lifecycle:lifecycle-reactivestreams:2.2.0'
        lifecycleSavedState = 'androidx.lifecycle:lifecycle-viewmodel-savedstate:2.2.0'
        lifecycleViewModel = 'androidx.lifecycle:lifecycle-viewmodel:2.2.0'
        material = 'com.google.android.material:material:1.2.1'
        mockitoAndroid = 'org.mockito:mockito-android:3.5.15'
        mockitoCore = 'org.mockito:mockito-core:2.23.0'
        palette = 'androidx.palette:palette:1.0.0'
        recyclerView = 'androidx.recyclerview:recyclerview:1.1.0'
        savedState = 'androidx.savedstate:savedstate:1.0.0'
        supportAnnotations = 'androidx.annotation:annotation:1.1.0'
        swipeRefreshLayout = 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
        testCore = 'androidx.test:core:1.3.0'
        viewpager2 = 'androidx.viewpager2:viewpager2:1.0.0'

        // Artifactory publishing params
        libProps = new Properties()
        bintrayProps = new Properties()
        localProps = new Properties()

        libProps.load(new FileInputStream(file("libraryVersion.properties")))

        groupId = libProps['groupId']
        artifactoryUrl = libProps['artifactoryUrl']

        // publish properties can be set from the command line or local.properties.
        // Multiple repository setup can only done in the local.properties file with the following
        // mapping:

        // repositories=[{
        // "name": "myRepo",
        // "url": "myUrl",
        // "credentials": "username": "user", "password": "hi"
        // }]

        publishRepositories = []
        def localPropsFile = file("local.properties")

        if (localPropsFile.exists()) {
            localProps.load(new FileInputStream(localPropsFile))

            def slurper = new JsonSlurper()
            def repos = localProps['repositories']
            if (repos != null) publishRepositories = slurper.parseText(repos)
        }

        def bintrayFile = file("bintray.properties")

        if (bintrayFile.exists()) {
            bintrayProps.load(new FileInputStream(bintrayFile))
        }

        def pullProperty = { String name, Properties prop ->
            return project.findProperty(name) ?: prop[name] ?: ""
        }

        publishUrl = pullProperty('publishUrl', localProps)
        publishRepoName = pullProperty('publishRepoName', localProps)
        publishUserName = pullProperty('publishUserName', localProps)
        publishPassword = pullProperty('publishPassword', localProps)
        versionSuffix = pullProperty('versionSuffix', localProps)

        bintrayUser = pullProperty('bintrayUser', bintrayProps)
        bintrayApiKey = pullProperty('bintrayApiKey', bintrayProps)
    }
}

// Plugin used to upload authenticated files to BinTray through Gradle
plugins {
    id "com.jfrog.bintray" version "1.8.5"
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://androidx.dev/snapshots/builds/6847503/artifacts/repository' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


task incrementalPublish {
    def libProps = project.ext.libProps
    def artifactExists = { String mavenRepo, String name, String version, boolean addAuth ->
        def group = libProps['groupId'].replace(".", "/")
        def url = "${mavenRepo}/${group}/${name}/${version}/${name}-${version}.pom"

        try {
            HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection()
            if (addAuth) {
                String encoded = Base64.getEncoder().encodeToString(("${project.ext.publishUserName}:${project.ext.publishPassword}").getBytes("UTF-8"))
                connection.setRequestProperty("Authorization", "Basic " + encoded)
            }
            connection.connect()

            def exists = connection.getResponseCode() == HttpURLConnection.HTTP_OK
            println "pom for ${name} exists on ${url}: ${exists}"

            return exists
        }
        catch (e) {
            println "Unable to configure incremental publish, check your internet connection"
            e.printStackTrace()
            return null
        }
    }

    project.afterEvaluate {
        libProps.stringPropertyNames()
                .findAll { name -> name.contains('version') }
                .each { name ->
                    def moduleName = name - '_version'
                    def version = libProps[name] + project.ext.versionSuffix
                    def githubUrl = "${project.ext.publishUrl}"
                    def jCenterUrl = "https://jcenter.bintray.com"

                    def existsOnGitHub = artifactExists(githubUrl, moduleName, version, true)
                    def existsOnJcenter = artifactExists(jCenterUrl, moduleName, version, false)
                    def hasJcenterCreds = project.ext.bintrayUser && !project.ext.bintrayUser.empty && project.ext.bintrayApiKey && !project.ext.bintrayApiKey.empty

                    def publishGithub = existsOnGitHub != null && !existsOnGitHub
                    def publishJcenter = existsOnJcenter != null && !existsOnJcenter && hasJcenterCreds

                    if (publishJcenter || publishJcenter) {
                        dependsOn ":${moduleName}:assemble"
                    }

                    if (publishGithub) {
                        dependsOn ":${moduleName}:publishLibPublicationTo${project.ext.publishRepoName}Repository"
                    }

                    if (publishJcenter) {
                        println "Adding task ${moduleName} to bintray publish"
                        dependsOn ":${moduleName}:bintrayUpload"
                    }
                }
    }
}